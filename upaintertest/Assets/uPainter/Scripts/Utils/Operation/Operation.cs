//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Wing.uPainter
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using UnityEngine;

    public class Operation : IOperation
    {
        private int m_iMaxStep = 10;
        private int m_CurrentOpStep = 0;
        private List<ICommand> m_redoStack = new List<ICommand>();
        private List<ICommand> m_undoStack = new List<ICommand>();
        private Dictionary<object, int> mTargets = new Dictionary<object, int>();

        public string Name = "";

        public event Action<ICommand> OnUndo;
        public event Action<ICommand> OnRedo;

        public int MaxStepNumber
        {
            get
            {
                return m_iMaxStep;
            }

            set
            {
                m_iMaxStep = value;
            }
        }

        public Operation()
        {

        }

        public Operation(string name)
        {
            Name = name;
        }

        public bool HasUndo()
        {
            return m_undoStack.Count > 0;
        }

        public bool HasRedo()
        {
            return m_redoStack.Count > 0;
        }

        public bool IsDirty()
        {
            return m_CurrentOpStep != 0;
        }

        public void ClearDirtyFlag()
        {
            m_CurrentOpStep = 0;
        }

        public void DoCommand(ICommand command, bool reallyDo = true)
        {
            m_CurrentOpStep++;
            if (reallyDo)
            {
                command.Do();
            }
            if(command.Target != null)
            {
                if (mTargets.ContainsKey(command.Target))
                {
                    mTargets[command.Target]++;
                }
                else
                {
                    mTargets[command.Target] = 1;
                }
            }

            m_undoStack.Add(command);
            ClampStack(ref m_undoStack);
            //clear redo stack
            ClearStack(ref m_redoStack);
        }

        private void ClearStack(ref List<ICommand> stack)
        {
            int count = stack.Count;
            for (int i = 0; i < count; i++)
            {
                ICommand cmd = stack.Last();               
                Destory(cmd);
                stack.Remove(cmd);
            }
        }

        private void Destory(ICommand cmd)
        {
            //如果是针对同一个对象的操作，此处应该慎重使用，可能造成使用被销毁的物体
            if (cmd.Target != null)
            {
                mTargets[cmd.Target]--;

                var has = mTargets.ContainsKey(cmd.Target);
                if (!has || has && mTargets[cmd.Target] <= 0)
                {
                    cmd.Destroy();
                }
            }
            else
            {
                cmd.Destroy();
            }
        }

        private void ClampStack(ref List<ICommand> stack)
        {
            if (stack.Count > m_iMaxStep)
            {
                int cnt = stack.Count - m_iMaxStep;
                for (int i = 0; i < cnt; i++)
                {
                    ICommand cmd = stack[i];
                    Destory(cmd);
                    stack.Remove(cmd);
                }

                m_CurrentOpStep = m_iMaxStep;
            }
        }

        public void DoCommand(Action doCmd, Action undoCmd)
        {
            Command command = new Command(doCmd, undoCmd);
            command.Do();

            if (command.StateName != null)
            {
                Debug.Log(string.Format("Do:{0}:{1}", command.GetUniqueName(), command.StateName));
            }
            else
            {
                Debug.Log(string.Format("Do:{0}", command.GetUniqueName()));
            }

            m_undoStack.Add(command);
            ClampStack(ref m_undoStack);
            //clear redo stack
            ClearStack(ref m_redoStack);
            m_CurrentOpStep--;
        }

        public ICommand Redo()
        {
            if (m_redoStack.Count == 0)
            {
                return null;
            }

            ICommand command = m_redoStack.Last();
            m_redoStack.Remove(command);

            m_undoStack.Add(command);
            ClampStack(ref m_undoStack);
            command.Do();

            if (command.StateName != null)
            {
                Debug.Log(string.Format("Redo:{0}:{1}", command.GetUniqueName(), command.StateName));
            }
            else
            {
                Debug.Log(string.Format("Redo:{0}", command.GetUniqueName()));
            }

            if(OnRedo != null)
            {
                OnRedo(command);
            }

            return command;
        }

        public ICommand Undo()
        {
            if (m_undoStack.Count == 0)
            {
                return null;
            }

            ICommand command = m_undoStack.Last();
            m_undoStack.Remove(command);

            m_redoStack.Add(command);
            ClampStack(ref m_redoStack);

            command.Undo();
            m_CurrentOpStep--;

            if (command.StateName != null)
            {
                Debug.Log(string.Format("Redo:{0}:{1}", command.GetUniqueName(), command.StateName));
            }
            else
            {
                Debug.Log(string.Format("Redo:{0}", command.GetUniqueName()));
            }

            if(OnUndo != null)
            {
                OnUndo(command);
            }

            return command;
        }
    }
}

